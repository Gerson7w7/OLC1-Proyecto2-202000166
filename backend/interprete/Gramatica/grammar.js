/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,35],$V1=[1,19],$V2=[1,20],$V3=[1,21],$V4=[1,22],$V5=[1,34],$V6=[1,36],$V7=[1,37],$V8=[1,38],$V9=[1,39],$Va=[1,40],$Vb=[1,25],$Vc=[1,41],$Vd=[1,42],$Ve=[1,43],$Vf=[1,44],$Vg=[1,45],$Vh=[1,46],$Vi=[1,47],$Vj=[1,48],$Vk=[1,49],$Vl=[1,26],$Vm=[1,27],$Vn=[1,29],$Vo=[1,30],$Vp=[1,31],$Vq=[1,32],$Vr=[1,33],$Vs=[1,53],$Vt=[1,54],$Vu=[1,55],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[2,5,22,23,24,25,28,30,31,32,33,34,37,39,45,53,56,57,58,59,60,61,66,67,78,80,83,84,88,89,90,93,94,95,96,97,98,99,100],$VA=[39,40,41,42,43,44,47,48,49,50,51,52,54,55,68],$VB=[2,64],$VC=[2,66],$VD=[1,75],$VE=[2,58],$VF=[1,80],$VG=[1,83],$VH=[1,87],$VI=[1,86],$VJ=[1,88],$VK=[1,89],$VL=[1,90],$VM=[1,91],$VN=[1,92],$VO=[1,93],$VP=[1,94],$VQ=[1,95],$VR=[1,96],$VS=[1,97],$VT=[1,98],$VU=[1,99],$VV=[1,100],$VW=[1,102],$VX=[1,107],$VY=[37,46,72,77],$VZ=[8,38,39,40,41,42,43,44,46,47,48,49,50,51,52,54,55,68,69,74],$V_=[1,121],$V$=[8,36,38],$V01=[2,36],$V11=[1,127],$V21=[2,62],$V31=[1,130],$V41=[2,124],$V51=[1,190],$V61=[38,46],$V71=[38,46,74],$V81=[8,38,39,40,44,46,47,48,49,50,51,52,54,55,68,69,74],$V91=[8,38,39,40,41,42,44,46,47,48,49,50,51,52,54,55,68,69,74],$Va1=[8,38,44,46,47,48,49,50,51,52,54,55,68,69,74],$Vb1=[1,203],$Vc1=[1,202],$Vd1=[2,5,22,23,24,25,28,30,31,32,33,34,37,39,45,53,56,57,58,59,60,61,66,67,78,80,82,83,84,88,89,90,93,94,95,96,97,98,99,100],$Ve1=[8,36,38,39,40,41,42,43,44,46,47,48,49,50,51,52,54,55,68,69,72,74],$Vf1=[78,88,89],$Vg1=[1,239];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PUNTO_COMA":8,"asignacion_simple":9,"imprimir":10,"incremento_decremento":11,"declaracion_vector":12,"asignacion_simple_vector":13,"if":14,"while":15,"switch":16,"for":17,"do-while":18,"funcion":19,"metodo":20,"llamada_funcion":21,"RUN":22,"BREAK":23,"CONTINUE":24,"RETURN":25,"expresion":26,"errores":27,"ERROR":28,"tipo":29,"INT":30,"DOUBLE":31,"BOOLEAN":32,"CHAR":33,"STRING":34,"identificadores":35,"ASIGNACION":36,"IDENTIFICADOR":37,"COMA":38,"RESTA":39,"SUMA":40,"MULTIPLICACION":41,"DIVISION":42,"POTENCIA":43,"MODULO":44,"PARENTESIS_ABRE":45,"PARENTESIS_CIERRA":46,"IGUAL":47,"DESIGUAL":48,"MENOR":49,"MENOR_IGUAL":50,"MAYOR":51,"MAYOR_IGUAL":52,"NOT":53,"OR":54,"AND":55,"ENTERO":56,"DECIMAL":57,"CARACTER":58,"CADENA":59,"FALSE":60,"TRUE":61,"ternario":62,"corchetes_con_expresion":63,"casteo":64,"funciones_nativas":65,"PRINT":66,"PRINTLN":67,"INTERROGACION":68,"DOS_PUNTOS":69,"corchetes_vacios":70,"NEW":71,"CORCHETE_ABRE":72,"lista_valores_vectores":73,"CORCHETE_CIERRA":74,"lista_expresiones":75,"bloque":76,"LLAVE_ABRE":77,"LLAVE_CIERRA":78,"condicion":79,"IF":80,"else":81,"ELSE":82,"WHILE":83,"SWITCH":84,"case_list":85,"default":86,"case":87,"CASE":88,"DEFAULT":89,"FOR":90,"for1":91,"for2":92,"DO":93,"TOUPPER":94,"TOLOWER":95,"ROUND":96,"LENGTH":97,"TYPEOF":98,"TOSTRING":99,"TOCHARARRAY":100,"parametros":101,"VOID":102,"parametros2":103,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTO_COMA",22:"RUN",23:"BREAK",24:"CONTINUE",25:"RETURN",28:"ERROR",30:"INT",31:"DOUBLE",32:"BOOLEAN",33:"CHAR",34:"STRING",36:"ASIGNACION",37:"IDENTIFICADOR",38:"COMA",39:"RESTA",40:"SUMA",41:"MULTIPLICACION",42:"DIVISION",43:"POTENCIA",44:"MODULO",45:"PARENTESIS_ABRE",46:"PARENTESIS_CIERRA",47:"IGUAL",48:"DESIGUAL",49:"MENOR",50:"MENOR_IGUAL",51:"MAYOR",52:"MAYOR_IGUAL",53:"NOT",54:"OR",55:"AND",56:"ENTERO",57:"DECIMAL",58:"CARACTER",59:"CADENA",60:"FALSE",61:"TRUE",66:"PRINT",67:"PRINTLN",68:"INTERROGACION",69:"DOS_PUNTOS",71:"NEW",72:"CORCHETE_ABRE",74:"CORCHETE_CIERRA",77:"LLAVE_ABRE",78:"LLAVE_CIERRA",80:"IF",82:"ELSE",83:"WHILE",84:"SWITCH",88:"CASE",89:"DEFAULT",90:"FOR",93:"DO",94:"TOUPPER",95:"TOLOWER",96:"ROUND",97:"LENGTH",98:"TYPEOF",99:"TOSTRING",100:"TOCHARARRAY",102:"VOID"},
productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,3],[6,2],[6,2],[6,2],[6,3],[6,1],[27,1],[27,1],[29,1],[29,1],[29,1],[29,1],[29,1],[7,4],[7,2],[9,3],[35,3],[35,1],[26,2],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,3],[26,2],[26,3],[26,3],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,1],[26,2],[26,2],[26,1],[26,1],[26,1],[10,4],[10,4],[62,5],[64,3],[11,3],[11,3],[12,7],[12,7],[12,5],[70,3],[70,2],[63,4],[63,3],[73,5],[73,3],[73,1],[75,3],[75,1],[13,4],[76,3],[76,2],[79,3],[14,4],[81,2],[81,2],[81,0],[15,3],[16,6],[16,5],[16,5],[85,2],[85,1],[87,4],[86,3],[17,9],[91,1],[91,1],[92,1],[92,1],[18,5],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[65,4],[19,6],[19,7],[20,6],[20,7],[20,4],[20,5],[101,3],[101,1],[103,2],[21,4],[21,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return $$[$0-1];
    
break;
case 3: case 97:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 4: case 84: case 98: case 121:
 this.$ = [$$[$0]]; 
break;
case 19:
 this.$ = new Run($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 20:
 this.$ = new Break(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 21:
 this.$ = new Continue(_$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 22:
 this.$ = new Return(null, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 23:
 this.$ = new Return($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 25:
 this.$ = new _Error(_$[$0].first_line, _$[$0].first_column, "Léxico", "No se reconoce el siguiente token: " + yytext, yytext) 
break;
case 26:
 this.$ = new _Error(_$[$0].first_line, _$[$0].first_column, "Sintáctico", "No se esperaba el siguiente token: " + yytext, yytext) 
break;
case 32:
 this.$ = new Declaracion($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 33:
 this.$ = new Declaracion($$[$0-1], $$[$0], null, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 34:
 this.$ = new AsignacionSimple($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 35:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 36:
 this.$ = [$$[$0]] 
break;
case 37:
 this.$ = new Aritmetica($$[$0], new Literal("-1", TipoLiteral.ENTERO, _$[$0-1].first_line, _$[$0-1].first_column), TipoAritmetica.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 38:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 39:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 40:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 41:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 42:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 43:
 this.$ = new Aritmetica($$[$0-2], $$[$0], TipoAritmetica.MODULO, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 44: case 70: case 88:
 this.$ = $$[$0-1] 
break;
case 45:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 46:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.DESIGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 47:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 48:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 49:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 50:
 this.$ = new Relacional($$[$0-2], $$[$0], TipoRelacional.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 51:
 this.$ = new Logico($$[$0], null, TipoLogico.NOT, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 52:
 this.$ = new Logico($$[$0-2], $$[$0], TipoLogico.OR, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 53:
 this.$ = new Logico($$[$0-2], $$[$0], TipoLogico.AND, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 54:
 this.$ = new Literal($$[$0], TipoLiteral.ENTERO, _$[$0].first_line, _$[$0].first_column) 
break;
case 55:
 this.$ = new Literal($$[$0], TipoLiteral.DECIMAL, _$[$0].first_line, _$[$0].first_column) 
break;
case 56:
 this.$ = new Literal($$[$0], TipoLiteral.CARACTER, _$[$0].first_line, _$[$0].first_column) 
break;
case 57:
 this.$ = new Literal($$[$0], TipoLiteral.CADENA, _$[$0].first_line, _$[$0].first_column) 
break;
case 58:
 this.$ = new Acceso($$[$0], _$[$0].first_line, _$[$0].first_column) 
break;
case 59: case 60:
 this.$ = new Literal($$[$0], TipoLiteral.BOOLEAN, _$[$0].first_line, _$[$0].first_column) 
break;
case 61: case 64: case 65: case 66: case 90: case 91: case 102: case 103: case 104: case 105:
 this.$ = $$[$0] 
break;
case 62:
 this.$ = new AccesoVector($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 63:
 this.$ = new Casteo($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 67:
 this.$ = new Print($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 68:
 this.$ = new Println($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 69:
 this.$ = new Ternario($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 71:
 this.$ = new IncrementoDecremento($$[$0-2], TipoAritmetica.SUMA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 72:
 this.$ = new IncrementoDecremento($$[$0-2], TipoAritmetica.RESTA, _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 73:
 this.$ = new DeclaracionVector1($$[$0-6], $$[$0-5], $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 74:
 this.$ = new DeclaracionVector2($$[$0-6], $$[$0-5], $$[$0-1], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 75:
 this.$ = new DeclaracionVector2($$[$0-4], $$[$0-3], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 78:
 $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 79: case 81:
 this.$ = [$$[$0-1]]; 
break;
case 80:
 $$[$0].push($$[$0-3]); this.$ = $$[$0]; 
break;
case 82:
 this.$ = $$[$0]; 
break;
case 83: case 120:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 85:
 this.$ = new AsignacionVectorSimple($$[$0-3], $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 86:
 this.$ = new Bloque($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 87:
 this.$ = new Bloque([], _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 89:
 this.$ = new IfElse($$[$0-2], $$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 92:
 this.$ = null 
break;
case 93:
 this.$ = new While($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 94:
 this.$ = new Switch($$[$0-4], $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 95:
 this.$ = new Switch($$[$0-3], $$[$0-1], null, _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 96:
 this.$ = new Switch($$[$0-3], null, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 99:
 this.$ = new Case($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 100:
 this.$ = new Default($$[$0], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
case 101:
 this.$ = new For($$[$0-6], $$[$0-4], $$[$0-2], $$[$0], _$[$0-8].first_line, _$[$0-8].first_column) 
break;
case 106:
 this.$ = new DoWhile($$[$0-3], $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 107:
 this.$ = new ToUpperCase($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 108:
 this.$ = new ToLowerCase($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 109:
 this.$ = new Round($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 110:
 this.$ = new Length($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 111:
 this.$ = new TypeOf($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 112:
 this.$ = new ToString($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 113:
 this.$ = new ToChararray($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 114:
 this.$ = new Funcion($$[$0-5], [], $$[$0-1], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 115:
 this.$ = new Funcion($$[$0-6], $$[$0-4], $$[$0-1], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 116:
 this.$ = new Funcion($$[$0-5], [], null, $$[$0], _$[$0-5].first_line, _$[$0-5].first_column) 
break;
case 117:
 this.$ = new Funcion($$[$0-6], $$[$0-4], null, $$[$0], _$[$0-6].first_line, _$[$0-6].first_column) 
break;
case 118:
 this.$ = new Funcion($$[$0-3], [], null, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 119:
 this.$ = new Funcion($$[$0-4], $$[$0-2], null, $$[$0], _$[$0-4].first_line, _$[$0-4].first_column) 
break;
case 122:
 this.$ = new Declaracion($$[$0-1], [$$[$0]], null, _$[$0-1].first_line, _$[$0-1].first_column) 
break;
case 123:
 this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column) 
break;
case 124:
 this.$ = new LlamadaFuncion($$[$0-2], [], _$[$0-2].first_line, _$[$0-2].first_column) 
break;
}
},
table: [{2:$V0,3:1,4:2,5:[1,3],6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{1:[3]},{2:$V0,5:[1,60],6:61,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{1:[2,2]},o($Vz,[2,4]),{8:[1,62]},{8:[1,63]},{8:[1,64]},o($VA,$VB,{8:[1,65]}),{8:[1,66]},{8:[1,67]},o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),o($Vz,[2,17]),o($VA,$VC,{8:[1,68]}),{21:69,37:[1,70]},{8:[1,71]},{8:[1,72]},{8:[1,73],11:76,21:77,26:74,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($Vz,[2,24]),{35:78,37:[1,79]},o($VA,$VE,{63:81,36:$VF,45:[1,82],72:$VG}),{45:[1,84]},{45:[1,85]},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{45:$VW,79:101},{45:$VW,79:103},{45:$VW,79:104},{45:[1,105]},{76:106,77:$VX},o($Vz,[2,25]),o($Vz,[2,26]),o($VY,[2,27]),o($VY,[2,28]),o($VY,[2,29]),o($VY,[2,30]),o($VY,[2,31]),{11:76,21:77,26:108,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:109,29:110,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:111,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($VZ,[2,54]),o($VZ,[2,55]),o($VZ,[2,56]),o($VZ,[2,57]),o($VZ,[2,59]),o($VZ,[2,60]),o($VZ,[2,61]),{11:76,21:77,26:112,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($VZ,[2,65]),{45:[1,113]},{45:[1,114]},{45:[1,115]},{45:[1,116]},{45:[1,117]},{45:[1,118]},{45:[1,119]},{1:[2,1]},o($Vz,[2,3]),o($Vz,[2,5]),o($Vz,[2,6]),o($Vz,[2,7]),o($Vz,[2,8]),o($Vz,[2,9]),o($Vz,[2,10]),o($Vz,[2,18]),{8:[1,120]},{45:$V_},o($Vz,[2,20]),o($Vz,[2,21]),o($Vz,[2,22]),{8:[1,122],39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o($VZ,$VE,{63:123,45:$V_,72:$VG}),o($VZ,$VB),o($VZ,$VC),{8:[2,33],36:[1,124],38:[1,125]},o($V$,$V01,{70:126,72:$V11}),{11:76,21:77,26:128,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($VA,$V21,{36:[1,129],72:$V31}),{11:76,21:77,26:135,29:136,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$VD,39:$Vc,45:$Vd,46:[1,131],53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,75:133,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy,101:132,103:134},{11:76,21:77,26:137,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:138,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:139,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:141,37:$VD,39:$Vc,40:[1,140],45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:143,37:$VD,39:[1,142],45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:144,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:145,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:146,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:147,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:148,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:149,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:150,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:151,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:152,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:153,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:154,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:155,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:156,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{76:157,77:$VX},{11:76,21:77,26:158,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{76:159,77:$VX},{77:[1,160]},{7:162,9:163,29:164,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:[1,165],91:161},{83:[1,166]},{2:$V0,4:167,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,78:[1,168],80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($VZ,[2,37]),{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,169],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{46:[1,170]},o($VZ,[2,51]),o($VZ,[2,63]),{11:76,21:77,26:171,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:172,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:173,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:174,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:175,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:176,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:177,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($Vz,[2,19]),{11:76,21:77,26:135,37:$VD,39:$Vc,45:$Vd,46:[1,178],53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,75:133,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($Vz,[2,23]),o($VZ,$V21,{72:$V31}),{11:76,21:77,26:179,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{37:[1,180]},{36:[1,181]},{74:[1,182]},o([8,46],[2,34],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV}),{11:76,21:77,26:183,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:184,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o([8,39,40,41,42,43,44,47,48,49,50,51,52,54,55,68],$V41,{76:186,69:[1,185],77:$VX}),{38:[1,188],46:[1,187]},{38:$V51,46:[1,189]},o($V61,[2,121]),o($V71,[2,84],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV}),{37:[1,191]},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV,74:[1,192]},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,193],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,194],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o($VZ,[2,71]),o($V81,[2,38],{41:$VJ,42:$VK,43:$VL}),o($VZ,[2,72],{62:50,64:51,65:52,11:76,21:77,26:108,37:$VD,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy}),o($V81,[2,39],{41:$VJ,42:$VK,43:$VL}),o($V91,[2,40],{43:$VL}),o($V91,[2,41],{43:$VL}),o($VZ,[2,42]),o([8,38,44,46,54,55,68,69,74],[2,43],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS}),o($Va1,[2,45],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL}),o($Va1,[2,46],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL}),o($Va1,[2,47],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL}),o($Va1,[2,48],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL}),o($Va1,[2,49],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL}),o($Va1,[2,50],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL}),o([8,38,46,54,68,69,74],[2,52],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,55:$VU}),o([8,38,46,54,55,68,69,74],[2,53],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS}),{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV,69:[1,195]},o($Vz,[2,92],{81:196,82:[1,197]}),{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,198],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o($Vz,[2,93]),{85:199,86:200,87:201,88:$Vb1,89:$Vc1},{8:[1,204]},{8:[2,102]},{8:[2,103]},{35:78,37:[1,205]},{36:$VF},{45:$VW,79:206},{2:$V0,6:61,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,78:[1,207],80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($Vd1,[2,87]),o($VZ,[2,44]),o([37,39,45,53,56,57,58,59,60,61,94,95,96,97,98,99,100],[2,70]),{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,208],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,209],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,210],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,211],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,212],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,213],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[1,214],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o($VZ,$V41),{8:[2,32],39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o($V$,[2,35]),{11:76,21:77,26:217,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,71:[1,215],72:[1,216],94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{36:[2,77],70:218,72:$V11},{8:[2,85],39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV,74:[1,219]},{29:220,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,102:[1,221]},o($Vz,[2,118]),{69:[1,222],76:223,77:$VX},{29:136,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,103:224},o($VZ,[2,123]),{11:76,21:77,26:225,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($V61,[2,122]),o($Ve1,[2,79]),{8:[2,67]},{8:[2,68]},{11:76,21:77,26:226,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($Vz,[2,89]),{14:228,76:227,77:$VX,80:$Vn},o([8,77],[2,88]),{78:[1,230],86:229,87:231,88:$Vb1,89:$Vc1},{78:[1,232]},o($Vf1,[2,98]),{69:[1,233]},{11:76,21:77,26:234,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{11:76,21:77,26:235,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($V$,$V01),{8:[1,236]},o($Vd1,[2,86]),o($VZ,[2,107]),o($VZ,[2,108]),o($VZ,[2,109]),o($VZ,[2,110]),o($VZ,[2,111]),o($VZ,[2,112]),o($VZ,[2,113]),{29:237,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va},{11:76,21:77,26:135,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,72:$Vg1,73:238,75:240,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{8:[2,75],39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},{36:[2,76]},o($Ve1,[2,78]),{76:241,77:$VX},{76:242,77:$VX},{29:243,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,102:[1,244]},o($Vz,[2,119]),o($V61,[2,120]),o($V71,[2,83],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV}),o([8,38,46,68,69,74],[2,69],{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU}),o($Vz,[2,90]),o($Vz,[2,91]),{78:[1,245]},o($Vz,[2,95]),o($Vf1,[2,97]),o($Vz,[2,96]),{2:$V0,4:246,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV,69:[1,247]},{8:[1,248],39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o($Vz,[2,106]),{63:249,72:$VG},{74:[1,250]},{11:76,21:77,26:135,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,75:251,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{38:$V51,74:[2,82]},o($Vz,[2,114]),o($Vz,[2,116]),{76:252,77:$VX},{76:253,77:$VX},o($Vz,[2,94]),{2:$V0,6:61,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,78:[2,100],80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{2:$V0,4:254,6:4,7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,22:$V1,23:$V2,24:$V3,25:$V4,26:28,27:23,28:$V5,29:24,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,66:$Vl,67:$Vm,80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{9:256,11:76,21:77,26:257,37:[1,258],39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,92:255,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},{8:[2,73],72:$V31},{8:[2,74]},{38:$V51,74:[1,259]},o($Vz,[2,115]),o($Vz,[2,117]),o($Vf1,[2,99],{7:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:17,21:18,27:23,29:24,26:28,62:50,64:51,65:52,6:61,2:$V0,22:$V1,23:$V2,24:$V3,25:$V4,28:$V5,30:$V6,31:$V7,32:$V8,33:$V9,34:$Va,37:$Vb,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,66:$Vl,67:$Vm,80:$Vn,83:$Vo,84:$Vp,90:$Vq,93:$Vr,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy}),{46:[1,260]},{46:[2,104]},{39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,46:[2,105],47:$VN,48:$VO,49:$VP,50:$VQ,51:$VR,52:$VS,54:$VT,55:$VU,68:$VV},o([39,40,41,42,43,44,46,47,48,49,50,51,52,54,55,68],$VE,{63:123,36:$VF,45:$V_,72:$VG}),{38:[1,261],74:[2,81]},{76:262,77:$VX},{11:76,21:77,26:135,37:$VD,39:$Vc,45:$Vd,53:$Ve,56:$Vf,57:$Vg,58:$Vh,59:$Vi,60:$Vj,61:$Vk,62:50,64:51,65:52,72:$Vg1,73:263,75:240,94:$Vs,95:$Vt,96:$Vu,97:$Vv,98:$Vw,99:$Vx,100:$Vy},o($Vz,[2,101]),{74:[2,80]}],
defaultActions: {3:[2,2],60:[2,1],162:[2,102],163:[2,103],193:[2,67],194:[2,68],218:[2,76],250:[2,74],256:[2,104],263:[2,80]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    const { Aritmetica, TipoAritmetica } = require("../../dist/Expresion/Aritmetica");
    const { Relacional, TipoRelacional } = require("../../dist/Expresion/Relacional");
    const { Literal, TipoLiteral } = require("../../dist/Expresion/Literal");
    const { Print, Println } = require("../../dist/Intrucciones/Imprimir");
    const { Acceso } = require("../../dist/Expresion/Acceso");
    const { Declaracion, AsignacionSimple } = require("../../dist/Intrucciones/Declaracion");
    const { Ternario } = require("../../dist/Expresion/Ternario");
    const { Logico, TipoLogico } = require("../../dist/Expresion/Logico");
    const { Casteo } = require("../../dist/Expresion/Casteo");
    const { IncrementoDecremento } = require("../../dist/Expresion/IncrementoDecremento");
    const { DeclaracionVector1, DeclaracionVector2, AsignacionVectorSimple } = require("../../dist/Intrucciones/DeclaracionVector");
    const { AccesoVector } = require("../../dist/Expresion/AccesoVector");
    const { Bloque } = require("../../dist/Intrucciones/Bloque");
    const { IfElse } = require("../../dist/Intrucciones/IfElse");
    const { While } = require("../../dist/Intrucciones/While");
    const { Break, Continue, Return } = require("../../dist/Intrucciones/Transferencias");
    const { Switch, Case, Default } = require("../../dist/Intrucciones/Switch");
    const { For } = require("../../dist/Intrucciones/For");
    const { DoWhile } = require("../../dist/Intrucciones/DoWhile");
    const { ToUpperCase, ToLowerCase } = require("../../dist/Expresion/ToUpLowCase");
    const { Round } = require("../../dist/Expresion/Round");
    const { Length } = require("../../dist/Expresion/Length");
    const { TypeOf } = require("../../dist/Expresion/TypeOf");
    const { ToString } = require("../../dist/Expresion/ToString");
    const { ToChararray } = require("../../dist/Expresion/ToChararray");
    const { Funcion } = require("../../dist/Intrucciones/Funcion");
    const { LlamadaFuncion } = require("../../dist/Intrucciones/LlamadaFuncion");
    const { Run } = require("../../dist/Intrucciones/Run");
    const { _Error } = require("../../dist/Error/_Error");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// ignorar espacios en blanco
break;
case 1:// comentarios multilínea
break;
case 2:// comentario de una línea
break;
case 3:return 30;
break;
case 4:return 31;
break;
case 5:return 32;
break;
case 6:return 33;
break;
case 7:return 34;
break;
case 8:return 40;
break;
case 9:return 39;
break;
case 10:return 41;
break;
case 11:return 42;
break;
case 12:return 43;
break;
case 13:return 44;
break;
case 14:return 47;
break;
case 15:return 48;
break;
case 16:return 50;
break;
case 17:return 49;
break;
case 18:return 52;
break;
case 19:return 51;
break;
case 20:return 54;
break;
case 21:return 55;
break;
case 22:return 53;
break;
case 23:return 8;
break;
case 24:return 77;
break;
case 25:return 78;
break;
case 26:return 80;
break;
case 27:return 82;
break;
case 28:return 84;
break;
case 29:return 88;
break;
case 30:return 89;
break;
case 31:return 83;
break;
case 32:return 90;
break;
case 33:return 93;
break;
case 34:return 23;
break;
case 35:return 24;
break;
case 36:return 25;
break;
case 37:return 66;
break;
case 38:return 67;
break;
case 39:return 95;
break;
case 40:return 94;
break;
case 41:return 96;
break;
case 42:return 97;
break;
case 43:return 98;
break;
case 44:return 99;
break;
case 45:return 100;
break;
case 46:return 68;
break;
case 47:return 69;
break;
case 48:return 36;
break;
case 49:return 45;
break;
case 50:return 46;
break;
case 51:return 38;
break;
case 52:return 72;
break;
case 53:return 74;
break;
case 54:return 71;
break;
case 55:return 102;
break;
case 56:return 22;
break;
case 57:return 61;
break;
case 58:return 60;
break;
case 59:return 57;
break;
case 60:return 56;
break;
case 61:return 37;
break;
case 62: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 63: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 64:return 5;
break;
case 65:return 28;
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\*[^"*/"]*\*\/)/i,/^(?:\/\/.*)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:tolower\b)/i,/^(?:toupper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:tostring\b)/i,/^(?:tochararray\b)/i,/^(?:\?)/i,/^(?::)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:,)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:new\b)/i,/^(?:void\b)/i,/^(?:run\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_]*)/i,/^(?:"[^\"]*")/i,/^(?:'\\?.')/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}