Gramática usada para el desarrollo del proyecto 2 de Organanización de Lenguajes y Compiladores 1. 
Primer semestre 2022.
Gerson Rubén Quiroa del Cid.
Carné 202000166

Expresiones regulares:
[0-9]+("."[0-9]+)\b  	    números decimales
[0-9]+\b				    números enteros
([a-zA-Z_])[a-zA-Z0-9_]*	identificadores, empieza con una letra o guión bajo
\"[^\"]*\"			        cadenas entre comillas dobles
\'\\?.\'                	caracteres entre comillas simples

Precedencia:
izquierda - COMA CORCHETE_CIERRA
izquierda - INTERROGACION PARENTESIS_CIERRA
izquierda - OR
izquierda - AND
izquierda - MODULO
izquierda - IGUAL DESIGUAL MENOR MENOR_IGUAL MAYOR MAYOR_IGUAL
izquierda - SUMA RESTA
izquierda - MULTIPLICACION DIVISION
izquierda - POTENCIA
izquierda - UMENOS
derecha - IDENTIFICADOR
derecha - casteo
derecha - NOT

Inicio de la gramática: ini

instrucciones de la gramática:
ini -> instrucciones EOF
    | EOF
;

lista de intrucciones:
instrucciones -> instrucciones instruccion
    | instruccion
;

las diferentes instrucciones de nuestro lenguaje:
instruccion -> declaracion PUNTO_COMA
    | asignacion_simple PUNTO_COMA
    | imprimir PUNTO_COMA
    | incremento_decremento PUNTO_COMA
    | declaracion_vector PUNTO_COMA
    | asignacion_simple_vector PUNTO_COMA
    | if
    | while
    | switch
    | for
    | do-while
    | funcion
    | metodo
    | llamada_funcion PUNTO_COMA
    | RUN llamada_funcion PUNTO_COMA
    | BREAK PUNTO_COMA
    | CONTINUE PUNTO_COMA
    | RETURN PUNTO_COMA
    | RETURN expresion PUNTO_COMA
    | errores
;

produccion para los errores:
errores -> ERROR
    | error
;

tipos de datos de nuestro lenguaje:
tipo -> INT     
    | DOUBLE
    | BOOLEAN
    | CHAR
    | STRING
;

declararciones de variables:
declaracion -> tipo identificadores ASIGNACION expresion
    | tipo identificadores
;

asignacion de variables:
asignacion_simple -> IDENTIFICADOR ASIGNACION expresion
;

produccion para los identificadores en lista separado por comas:
identificadores -> identificadores COMA IDENTIFICADOR
    | IDENTIFICADOR
;

expresiones de nuestro lenguaje:
expresion -> RESTA expresion con precedencia de: UMENOS
    | expresion SUMA expresion 
    | expresion RESTA expresion
    | expresion MULTIPLICACION expresion
    | expresion DIVISION expresion
    | expresion POTENCIA expresion 
    | expresion MODULO expresion 
    | PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | expresion IGUAL expresion 
    | expresion DESIGUAL expresion
    | expresion MENOR expresion
    | expresion MENOR_IGUAL expresion
    | expresion MAYOR expresion
    | expresion MAYOR_IGUAL expresion 
    | NOT expresion
    | expresion OR expresion
    | expresion AND expresion
    | ENTERO 
    | DECIMAL
    | CARACTER
    | CADENA
    | IDENTIFICADOR
    | FALSE
    | TRUE
    | ternario
    | IDENTIFICADOR corchetes_con_expresion
    | casteo expresion
    | incremento_decremento
    | funciones_nativas
    | llamada_funcion 
;

produccion para los prints y printlns de nuestro lenguaje:
imprimir -> PRINT PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | PRINTLN PARENTESIS_ABRE expresion PARENTESIS_CIERRA
;

produccion para nuestra funcion ternaria:
ternario -> expresion INTERROGACION expresion DOS_PUNTOS expresion
;

produccion para el casteo de variables:
casteo -> PARENTESIS_ABRE tipo PARENTESIS_CIERRA
;

incremento y decremento de variables:
incremento_decremento -> expresion SUMA SUMA
    | expresion RESTA RESTA
;

declaraciones para vectores:
declaracion_vector -> tipo IDENTIFICADOR corchetes_vacios ASIGNACION NEW tipo corchetes_con_expresion
    | tipo IDENTIFICADOR corchetes_vacios ASIGNACION CORCHETE_ABRE lista_valores_vectores CORCHETE_CIERRA
    | tipo IDENTIFICADOR corchetes_vacios ASIGNACION expresion
;

corchetes vacios [][]:
corchetes_vacios -> CORCHETE_ABRE CORCHETE_CIERRA corchetes_vacios
    | CORCHETE_ABRE CORCHETE_CIERRA
;

corchetes con expresiones para encontrar una posicion:
corchetes_con_expresion -> corchetes_con_expresion CORCHETE_ABRE expresion CORCHETE_CIERRA
    | CORCHETE_ABRE expresion CORCHETE_CIERRA
;

lista de vectores para inicializar un vector:
lista_valores_vectores -> CORCHETE_ABRE lista_expresiones CORCHETE_CIERRA COMA  lista_valores_vectores
    | CORCHETE_ABRE lista_expresiones CORCHETE_CIERRA
    | lista_expresiones
;

lista de valores para inicializar un vector:
lista_expresiones -> lista_expresiones COMA expresion
    | expresion
;

asignacion para vectores:
asignacion_simple_vector -> IDENTIFICADOR corchetes_con_expresion ASIGNACION expresion
;

bloque de código limitado por {}:
bloque -> LLAVE_ABRE instrucciones LLAVE_CIERRA
    | LLAVE_ABRE LLAVE_CIERRA 
;

condiciones para algunas instrucciones que lo necesiten:
condicion -> PARENTESIS_ABRE expresion PARENTESIS_CIERRA
;

funcion if:
if -> IF condicion bloque else
;

funcion else:
else -> ELSE bloque
    | ELSE if 
    | epsilon
;

funcion while:
while -> WHILE condicion bloque
;

funcion switch:
switch -> SWITCH condicion LLAVE_ABRE case_list default LLAVE_CIERRA
    | SWITCH condicion LLAVE_ABRE case_list LLAVE_CIERRA
    | SWITCH condicion LLAVE_ABRE default LLAVE_CIERRA
;

lista de cases que pueden haber en un switch:
case_list -> case_list case
    | case
;

case de un switch:
case -> CASE expresion DOS_PUNTOS instrucciones
;

default de un switch:
default -> DEFAULT DOS_PUNTOS instrucciones
;

instruccion for:
for -> FOR PARENTESIS_ABRE for1 PUNTO_COMA expresion PUNTO_COMA for2 PARENTESIS_CIERRA bloque
;

asignacion o declaracion para el for:
for1 -> declaracion
    | asignacion_simple
;

expresion para sumar a la variables del for:
for2 -> asignacion_simple 
    | expresion
;

instruccion do-while:
do-while -> DO bloque WHILE condicion PUNTO_COMA  { $$ = new DoWhile($2, $4, @1.first_line, @1.first_column) }
;

diferentes funciones nativas que tiene el lenguaje:
funciones_nativas -> TOUPPER PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | TOLOWER PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | ROUND PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | LENGTH PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | TYPEOF PARENTESIS_ABRE expresion PARENTESIS_CIERRA 
    | TOSTRING PARENTESIS_ABRE expresion PARENTESIS_CIERRA
    | TOCHARARRAY PARENTESIS_ABRE expresion PARENTESIS_CIERRA
;

funciones del lenguaje:
funcion -> IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS tipo bloque 
    | IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA DOS_PUNTOS tipo bloque
;

métodos del lenguaje:
metodo -> IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA DOS_PUNTOS VOID bloque
    | IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA DOS_PUNTOS VOID bloque
    | IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA bloque
    | IDENTIFICADOR PARENTESIS_ABRE parametros PARENTESIS_CIERRA bloque
;

lista parametros de una funcion:
parametros -> parametros COMA parametros2 
    | parametros2  
;

parametro de una funcion:
parametros2 -> tipo IDENTIFICADOR
    | tipo IDENTIFICADOR corchetes_vacios
;

llamada de una funcion o método:
llamada_funcion -> IDENTIFICADOR PARENTESIS_ABRE lista_expresiones PARENTESIS_CIERRA 
    | IDENTIFICADOR PARENTESIS_ABRE PARENTESIS_CIERRA
;